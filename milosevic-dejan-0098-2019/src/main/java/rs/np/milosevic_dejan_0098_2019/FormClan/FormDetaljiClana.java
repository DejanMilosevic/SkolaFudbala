package rs.np.milosevic_dejan_0098_2019.FormClan;

import rs.np.milosevic_dejan_0098_2019.domain.Clan;
import rs.np.milosevic_dejan_0098_2019.domain.Kategorija;
import rs.np.milosevic_dejan_0098_2019.domain.Pozicija;
import rs.np.milosevic_dejan_0098_2019.so.clan.SODeleteClan;
import rs.np.milosevic_dejan_0098_2019.so.clan.SOUpdateClan;
import rs.np.milosevic_dejan_0098_2019.so.kategorija.SOGetAllKategorija;
import rs.np.milosevic_dejan_0098_2019.so.pozicija.SOGetAllPozicija;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.GroupLayout;
import javax.swing.SwingConstants;
import java.awt.Component;
import javax.swing.JComboBox;

/**
 * Predstavlja formu koja prikazuje detalje izabranog clana iz tabele. Omogucava
 * izmenu ili brisanje izabranog clana.
 * 
 * @author Dejan Milosevic
 * @since 1.1.0
 */
public class FormDetaljiClana extends javax.swing.JDialog {

	/**
	 * Clan ciji se detalji prikazuju na formi
	 */
	private Clan c;

	/**
	 * Konstruktor koji kreira formu. Inicijalizuje komponente forme, i postavlja
	 * njenu lokaciju i naslov.
	 * 
	 * @param parent forma iz koje se data otvara
	 * @param modal  modalitet
	 * @param c      clan ciji se detalji prikazuju
	 */
	public FormDetaljiClana(JDialog parent, boolean modal, Clan c) {
		super(parent, modal);
		initComponents();
		this.c = c;
		setLocationRelativeTo(null);
		popuniKategorije();
		popuniPozicije();
		popuniClana();
		setTitle("Detalji clana");
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		btnOtkazi = new javax.swing.JButton();
		btnObrisi = new javax.swing.JButton();
		btnIzmeni = new javax.swing.JButton();
		jLabel8 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		txtEmail = new javax.swing.JTextField();
		txtTelefon = new javax.swing.JTextField();
		jLabel10 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel11 = new javax.swing.JLabel();
		txtIme = new javax.swing.JTextField();
		txtDatumRodjenja = new javax.swing.JFormattedTextField();
		jLabel3 = new javax.swing.JLabel();
		cmbKategorija = new javax.swing.JComboBox();
		txtPrezime = new javax.swing.JTextField();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		btnOtkazi.setBackground(new java.awt.Color(102, 0, 102));
		btnOtkazi.setForeground(new java.awt.Color(255, 255, 255));
		btnOtkazi.setText("Otkazi");
		btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOtkaziActionPerformed(evt);
			}
		});

		btnObrisi.setBackground(new java.awt.Color(153, 0, 0));
		btnObrisi.setForeground(new java.awt.Color(255, 255, 255));
		btnObrisi.setText("Obrisi clana");
		btnObrisi.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnObrisiActionPerformed(evt);
			}
		});

		btnIzmeni.setBackground(new java.awt.Color(0, 0, 102));
		btnIzmeni.setForeground(new java.awt.Color(255, 255, 255));
		btnIzmeni.setText("Izmeni clana");
		btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnIzmeniActionPerformed(evt);
			}
		});

		jLabel8.setText("Email:");

		jLabel9.setText("Datum rodjenja:");

		txtEmail.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtEmailActionPerformed(evt);
			}
		});

		txtTelefon.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtTelefonActionPerformed(evt);
			}
		});

		jLabel10.setText("Telefon:");

		jLabel2.setText("Ime:");

		jLabel11.setText("Kategorija:");

		txtDatumRodjenja.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));

		jLabel3.setText("Prezime:");

		cmbKategorija.setModel(
				new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

		txtPrezime.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtPrezimeActionPerformed(evt);
			}
		});

		lblPozicija = new JLabel("Pozicija:");

		cmbPozicija = new JComboBox();

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup()
				.addGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(btnOtkazi, GroupLayout.PREFERRED_SIZE, 148, GroupLayout.PREFERRED_SIZE).addGap(18)
						.addComponent(btnObrisi, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE).addGap(41)
						.addComponent(btnIzmeni, GroupLayout.PREFERRED_SIZE, 145, GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup().addGap(15)
								.addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(jLabel2)
										.addComponent(jLabel3).addComponent(jLabel8).addComponent(jLabel9)
										.addComponent(jLabel10).addComponent(jLabel11).addComponent(lblPozicija))
								.addPreferredGap(ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addComponent(txtIme, GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
										.addComponent(txtPrezime, GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
										.addComponent(txtEmail, GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
										.addComponent(txtDatumRodjenja, GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
										.addComponent(txtTelefon, GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
										.addComponent(cmbKategorija, 0, 420, Short.MAX_VALUE)
										.addComponent(cmbPozicija, 0, 420, Short.MAX_VALUE))))
				.addGap(105)));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.TRAILING).addGroup(layout.createSequentialGroup()
				.addContainerGap()
				.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(jLabel2).addComponent(txtIme,
						GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(5)
				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(txtPrezime, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel3))
				.addGap(5)
				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(txtEmail, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel8))
				.addGap(5)
				.addGroup(layout
						.createParallelGroup(Alignment.BASELINE).addComponent(jLabel9).addComponent(txtDatumRodjenja,
								GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addPreferredGap(ComponentPlacement.RELATED)
				.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(jLabel10).addComponent(txtTelefon,
						GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(5)
				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(cmbKategorija, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel11))
				.addPreferredGap(ComponentPlacement.RELATED)
				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(cmbPozicija, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(lblPozicija))
				.addPreferredGap(ComponentPlacement.RELATED)
				.addGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(
						layout.createParallelGroup(Alignment.BASELINE).addComponent(btnOtkazi).addComponent(btnObrisi))
						.addComponent(btnIzmeni))
				.addContainerGap()));
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnOtkaziActionPerformed
		this.dispose();
	}// GEN-LAST:event_btnOtkaziActionPerformed

	private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnObrisiActionPerformed

		int result = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da " + "obrisete ovog clana?",
				"Konfirmacija", JOptionPane.YES_NO_OPTION);

		if (result == JOptionPane.NO_OPTION) {
			return;
		}

		if (result == JOptionPane.YES_OPTION) {
			try {
				(new SODeleteClan()).templateExecute(c);
				FormPretragaClana fp = (FormPretragaClana) getParent();
				fp.refreshTable();
				fp.popuniKategorije();
				JOptionPane.showMessageDialog(this, "Sistem je obrisao clana.", "Obavestenje",
						JOptionPane.INFORMATION_MESSAGE);
				this.dispose();
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(this, "Sistem ne moze da obrise clana!", "Greska",
						JOptionPane.ERROR_MESSAGE);
			}
		}

	}// GEN-LAST:event_btnObrisiActionPerformed

	private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnIzmeniActionPerformed

		try {
			if (txtEmail.getText().isEmpty() || txtTelefon.getText().isEmpty()) {
				JOptionPane.showMessageDialog(this, "Sva polja moraju biti popunjena!", "Upozorenje",
						JOptionPane.WARNING_MESSAGE);
				return;
			}

			String email = txtEmail.getText();
			String telefon = txtTelefon.getText();
			Kategorija kategorija = (Kategorija) cmbKategorija.getSelectedItem();
			Pozicija pozicija = (Pozicija) cmbPozicija.getSelectedItem();

			c.setEmail(email);
			c.setTelefonClana(telefon);
			c.setKategorija(kategorija);
			c.setPozicija(pozicija);

			(new SOUpdateClan()).templateExecute(c);
			FormPretragaClana fp = (FormPretragaClana) getParent();
			fp.refreshTable();
			fp.popuniKategorije();
			JOptionPane.showMessageDialog(this, "Sistem je izmenio clana.", "Obavestenje",
					JOptionPane.INFORMATION_MESSAGE);
			this.dispose();

		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Sistem ne moze da izmeni clana: " + ex.getMessage(), "Greska",
					JOptionPane.ERROR_MESSAGE);
		}

	}// GEN-LAST:event_btnIzmeniActionPerformed

	private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txtEmailActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_txtEmailActionPerformed

	private void txtTelefonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txtTelefonActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_txtTelefonActionPerformed

	private void txtPrezimeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txtPrezimeActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_txtPrezimeActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnIzmeni;
	private javax.swing.JButton btnObrisi;
	private javax.swing.JButton btnOtkazi;
	private javax.swing.JComboBox cmbKategorija;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JFormattedTextField txtDatumRodjenja;
	private javax.swing.JTextField txtEmail;
	private javax.swing.JTextField txtIme;
	private javax.swing.JTextField txtPrezime;
	private javax.swing.JTextField txtTelefon;
	private JLabel lblPozicija;
	private JComboBox cmbPozicija;
	// End of variables declaration//GEN-END:variables

	/**
	 * Poziva sistemsku operaciju za ucitavanje svih kategorija iz baze podataka i
	 * popunjava combo box ucitanim vrednostima.
	 */
	private void popuniKategorije() {
		try {
			SOGetAllKategorija so = new SOGetAllKategorija();
			so.templateExecute(new Kategorija());

			ArrayList<Kategorija> kategorije = so.getLista();

			cmbKategorija.removeAllItems();

			for (Kategorija kategorija : kategorije) {
				cmbKategorija.addItem(kategorija);
			}

		} catch (Exception ex) {
			Logger.getLogger(FormNoviClan.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * Poziva sistemsku operaciju za ucitavanje svih pozicija iz baze podataka i
	 * popunjava combo box ucitanim vrednostima.
	 */
	public void popuniPozicije() {
		try {
			SOGetAllPozicija so = new SOGetAllPozicija();
			so.templateExecute(new Pozicija());

			ArrayList<Pozicija> pozicije = so.getLista();

			cmbPozicija.removeAllItems();

			for (Pozicija pozicija : pozicije) {
				cmbPozicija.addItem(pozicija);
			}

		} catch (Exception ex) {
			Logger.getLogger(FormNoviClan.class.getName()).log(Level.SEVERE, null, ex);
		}

	}

	/**
	 * Postavlja vrednosti komponenti forme na osnovu podataka o izabranom clanu.
	 */
	private void popuniClana() {
		txtIme.setText(c.getImeClana());
		txtPrezime.setText(c.getPrezimeClana());
		txtIme.setEnabled(false);
		txtPrezime.setEnabled(false);
		SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
		txtDatumRodjenja.setText(sdf.format(c.getDatumRodjenja()));
		txtDatumRodjenja.setEnabled(false);
		txtEmail.setText(c.getEmail());
		txtTelefon.setText(c.getTelefonClana());
		cmbKategorija.getModel().setSelectedItem(c.getKategorija());
		cmbPozicija.getModel().setSelectedItem(c.getPozicija());
	}

}
